import "core-js/modules/es.object.assign";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import Vega from './Vega';
export default function createClassFromSpec(_ref) {
  var mode = _ref.mode,
      spec = _ref.spec;

  var FixedVegaChart =
  /*#__PURE__*/
  function (_React$PureComponent) {
    _inheritsLoose(FixedVegaChart, _React$PureComponent);

    function FixedVegaChart() {
      return _React$PureComponent.apply(this, arguments) || this;
    }

    var _proto = FixedVegaChart.prototype;

    _proto.render = function render() {
      return React.createElement(Vega, _extends({
        mode: mode,
        spec: spec
      }, this.props));
    };

    return FixedVegaChart;
  }(React.PureComponent);

  _defineProperty(FixedVegaChart, "getSpec", function getSpec() {
    return spec;
  });

  return FixedVegaChart;
}