"use strict";

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.some");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.string.iterator");

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _vegaEmbed = _interopRequireDefault(require("vega-embed"));

var _shallowEqual = _interopRequireDefault(require("./utils/shallowEqual"));

var _getUniqueFieldNames = _interopRequireDefault(require("./utils/getUniqueFieldNames"));

var _constants = require("./constants");

var _addSignalListenersToView = _interopRequireDefault(require("./utils/addSignalListenersToView"));

var _computeSpecChanges = _interopRequireDefault(require("./utils/computeSpecChanges"));

var _removeSignalListenersFromView = _interopRequireDefault(require("./utils/removeSignalListenersFromView"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var VegaEmbed =
/*#__PURE__*/
function (_React$PureComponent) {
  _inheritsLoose(VegaEmbed, _React$PureComponent);

  function VegaEmbed() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "containerRef", _react.default.createRef());

    _defineProperty(_assertThisInitialized(_this), "viewPromise", void 0);

    _defineProperty(_assertThisInitialized(_this), "handleError", function (error) {
      var _this$props$onError = _this.props.onError,
          onError = _this$props$onError === void 0 ? _constants.NOOP : _this$props$onError;
      onError(error); // eslint-disable-next-line no-console

      console.warn(error);
      return undefined;
    });

    _defineProperty(_assertThisInitialized(_this), "modifyView", function (action) {
      if (_this.viewPromise) {
        _this.viewPromise.then(function (view) {
          if (view) {
            action(view);
          }

          return true;
        }).catch(_this.handleError);
      }
    });

    return _this;
  }

  var _proto = VegaEmbed.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.createView();
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var _this2 = this;

    var fieldSet = (0, _getUniqueFieldNames.default)([this.props, prevProps]);
    fieldSet.delete('className');
    fieldSet.delete('signalListeners');
    fieldSet.delete('spec');
    fieldSet.delete('style'); // Only create a new view if necessary

    if (Array.from(fieldSet).some(function (f) {
      return _this2.props[f] !== prevProps[f];
    })) {
      this.clearView();
      this.createView();
    } else {
      var specChanges = (0, _computeSpecChanges.default)(this.props.spec, prevProps.spec);
      var newSignalListeners = this.props.signalListeners;
      var oldSignalListeners = prevProps.signalListeners;

      if (specChanges) {
        if (specChanges.isExpensive) {
          this.clearView();
          this.createView();
        } else {
          var areSignalListenersChanged = !(0, _shallowEqual.default)(newSignalListeners, oldSignalListeners);
          this.modifyView(function (view) {
            if (specChanges.width !== false) {
              view.width(specChanges.width);
            }

            if (specChanges.height !== false) {
              view.height(specChanges.height);
            }

            if (areSignalListenersChanged) {
              if (oldSignalListeners) {
                (0, _removeSignalListenersFromView.default)(view, oldSignalListeners);
              }

              if (newSignalListeners) {
                (0, _addSignalListenersToView.default)(view, newSignalListeners);
              }
            }

            view.run();
          });
        }
      } else {
        var _areSignalListenersChanged = !(0, _shallowEqual.default)(newSignalListeners, oldSignalListeners);

        this.modifyView(function (view) {
          if (_areSignalListenersChanged) {
            if (oldSignalListeners) {
              (0, _removeSignalListenersFromView.default)(view, oldSignalListeners);
            }

            if (newSignalListeners) {
              (0, _addSignalListenersToView.default)(view, newSignalListeners);
            }
          }

          view.run();
        });
      }
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.clearView();
  };

  _proto.createView = function createView() {
    var _this$props = this.props,
        spec = _this$props.spec,
        onNewView = _this$props.onNewView,
        _this$props$signalLis = _this$props.signalListeners,
        signalListeners = _this$props$signalLis === void 0 ? {} : _this$props$signalLis,
        options = _objectWithoutPropertiesLoose(_this$props, ["spec", "onNewView", "signalListeners"]);

    if (this.containerRef.current) {
      this.viewPromise = (0, _vegaEmbed.default)(this.containerRef.current, spec, options).then(function (_ref) {
        var view = _ref.view;

        if ((0, _addSignalListenersToView.default)(view, signalListeners)) {
          view.run();
        }

        return view;
      }).catch(this.handleError);

      if (onNewView) {
        this.modifyView(onNewView);
      }
    }
  };

  _proto.clearView = function clearView() {
    this.modifyView(function (view) {
      view.finalize();
    });
    this.viewPromise = undefined;
    return this;
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        className = _this$props2.className,
        style = _this$props2.style;
    return (// Create the container Vega draws inside
      _react.default.createElement("div", {
        ref: this.containerRef,
        className: className,
        style: style
      })
    );
  };

  return VegaEmbed;
}(_react.default.PureComponent);

exports.default = VegaEmbed;

_defineProperty(VegaEmbed, "propTypes", {
  className: _propTypes.default.string,
  onError: _propTypes.default.func
});