{"version":3,"file":"logical.js","sourceRoot":"","sources":["../../src/logical.ts"],"names":[],"mappings":"AAcA,MAAM,UAAU,WAAW,CAAC,EAA2B;IACrD,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;AACjB,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,EAA2B;IACtD,OAAO,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;AAClB,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,EAA2B;IACtD,OAAO,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;AAClB,CAAC;AAED,MAAM,UAAU,WAAW,CAAI,EAAyB,EAAE,EAAmB;IAC3E,IAAI,YAAY,CAAC,EAAE,CAAC,EAAE;QACpB,WAAW,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;KACzB;SAAM,IAAI,YAAY,CAAC,EAAE,CAAC,EAAE;QAC3B,KAAK,MAAM,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE;YAC1B,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;SACxB;KACF;SAAM,IAAI,WAAW,CAAC,EAAE,CAAC,EAAE;QAC1B,KAAK,MAAM,KAAK,IAAI,EAAE,CAAC,EAAE,EAAE;YACzB,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;SACxB;KACF;SAAM;QACL,EAAE,CAAC,EAAE,CAAC,CAAC;KACR;AACH,CAAC;AAED,MAAM,UAAU,2BAA2B,CACzC,EAAyB,EACzB,UAAuB;IAEvB,IAAI,YAAY,CAAC,EAAE,CAAC,EAAE;QACpB,OAAO,EAAC,GAAG,EAAE,2BAA2B,CAAC,EAAE,CAAC,GAAG,EAAE,UAAU,CAAC,EAAC,CAAC;KAC/D;SAAM,IAAI,YAAY,CAAC,EAAE,CAAC,EAAE;QAC3B,OAAO,EAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,2BAA2B,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAC,CAAC;KAC3E;SAAM,IAAI,WAAW,CAAC,EAAE,CAAC,EAAE;QAC1B,OAAO,EAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,2BAA2B,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAC,CAAC;KACzE;SAAM;QACL,OAAO,UAAU,CAAC,EAAE,CAAC,CAAC;KACvB;AACH,CAAC","sourcesContent":["export type LogicalComposition<T> = LogicalNot<T> | LogicalAnd<T> | LogicalOr<T> | T;\n\nexport interface LogicalOr<T> {\n  or: LogicalComposition<T>[];\n}\n\nexport interface LogicalAnd<T> {\n  and: LogicalComposition<T>[];\n}\n\nexport interface LogicalNot<T> {\n  not: LogicalComposition<T>;\n}\n\nexport function isLogicalOr(op: LogicalComposition<any>): op is LogicalOr<any> {\n  return !!op.or;\n}\n\nexport function isLogicalAnd(op: LogicalComposition<any>): op is LogicalAnd<any> {\n  return !!op.and;\n}\n\nexport function isLogicalNot(op: LogicalComposition<any>): op is LogicalNot<any> {\n  return !!op.not;\n}\n\nexport function forEachLeaf<T>(op: LogicalComposition<T>, fn: (op: T) => void) {\n  if (isLogicalNot(op)) {\n    forEachLeaf(op.not, fn);\n  } else if (isLogicalAnd(op)) {\n    for (const subop of op.and) {\n      forEachLeaf(subop, fn);\n    }\n  } else if (isLogicalOr(op)) {\n    for (const subop of op.or) {\n      forEachLeaf(subop, fn);\n    }\n  } else {\n    fn(op);\n  }\n}\n\nexport function normalizeLogicalComposition<T>(\n  op: LogicalComposition<T>,\n  normalizer: (o: T) => T\n): LogicalComposition<T> {\n  if (isLogicalNot(op)) {\n    return {not: normalizeLogicalComposition(op.not, normalizer)};\n  } else if (isLogicalAnd(op)) {\n    return {and: op.and.map(o => normalizeLogicalComposition(o, normalizer))};\n  } else if (isLogicalOr(op)) {\n    return {or: op.or.map(o => normalizeLogicalComposition(o, normalizer))};\n  } else {\n    return normalizer(op);\n  }\n}\n"]}