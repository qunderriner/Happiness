{"version":3,"file":"guide.js","sourceRoot":"","sources":["../../../src/compile/guide.ts"],"names":[],"mappings":"AAGA,OAAO,EAAC,IAAI,EAAC,MAAM,SAAS,CAAC;AAC7B,OAAO,EAAC,WAAW,EAAkB,MAAM,gBAAgB,CAAC;AAC5D,OAAO,EAAC,aAAa,EAAC,MAAM,eAAe,CAAC;AAG5C,MAAM,UAAU,gBAAgB,CAAC,QAA4B,EAAE,KAAgB;IAC7E,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,OAAwB,EAAE,EAAE;QAChE,MAAM,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;QACnC,uCACK,MAAM,GACN,aAAa,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAuB,EAAE,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,KAAK,EAAC,CAAC,CAAC,EAChH;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC","sourcesContent":["import {SignalRef} from 'vega-typings/types';\nimport {ValueDef} from '../channeldef';\nimport {GuideEncodingEntry} from '../guide';\nimport {keys} from '../util';\nimport {isSignalRef, VgEncodeChannel} from '../vega.schema';\nimport {wrapCondition} from './mark/encode';\nimport {UnitModel} from './unit';\n\nexport function guideEncodeEntry(encoding: GuideEncodingEntry, model: UnitModel) {\n  return keys(encoding).reduce((encode, channel: VgEncodeChannel) => {\n    const valueDef = encoding[channel];\n    return {\n      ...encode,\n      ...wrapCondition(model, valueDef, channel, (x: ValueDef | SignalRef) => (isSignalRef(x) ? x : {value: x.value}))\n    };\n  }, {});\n}\n"]}