{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../../src/compile/axis/config.ts"],"names":[],"mappings":"AAGA,OAAO,EAAC,cAAc,EAAY,MAAM,aAAa,CAAC;AACtD,OAAO,EAAC,cAAc,EAAC,MAAM,WAAW,CAAC;AAEzC,MAAM,UAAU,aAAa,CAC3B,QAAoB,EACpB,MAAc,EACd,OAA6B,EAC7B,MAAc,EACd,SAAoB,EACpB,KAAwB;;IAExB,MAAM,WAAW,GAAG,cAAc,CAAC,QAAQ,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;IAElE,IAAI,WAAW,KAAK,SAAS,EAAE;QAC7B,OAAO;YACL,UAAU,EAAE,OAAO;YACnB,WAAW,EAAE,WAAW;SACzB,CAAC;KACH;IAED,uDAAuD;IACvD,MAAM,WAAW,GAAG;QAClB,GAAG,CAAC,SAAS,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAC7C,GAAG,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAC1D,GAAG,CAAC,SAAS,KAAK,MAAM,IAAI,SAAS,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAExE,MAAM;QACN,OAAO,KAAK,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO;QAEnC,2BAA2B;QAC3B,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAClF,MAAM;KACP,CAAC;IACF,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;QACpC,IAAI,OAAA,MAAM,CAAC,UAAU,CAAC,0CAAG,QAAQ,OAAM,SAAS,EAAE;YAChD,OAAO;gBACL,UAAU,EAAE,UAAU;gBACtB,WAAW,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC;aAC1C,CAAC;SACH;KACF;IAED,OAAO,EAAE,CAAC;AACZ,CAAC","sourcesContent":["import {Axis} from '../../axis';\nimport {PositionScaleChannel} from '../../channel';\nimport {Config} from '../../config';\nimport {isQuantitative, ScaleType} from '../../scale';\nimport {getStyleConfig} from '../common';\n\nexport function getAxisConfig(\n  property: keyof Axis,\n  config: Config,\n  channel: PositionScaleChannel,\n  orient: string,\n  scaleType: ScaleType,\n  style: string | string[]\n) {\n  const styleConfig = getStyleConfig(property, style, config.style);\n\n  if (styleConfig !== undefined) {\n    return {\n      configFrom: 'style',\n      configValue: styleConfig\n    };\n  }\n\n  // configTypes to loop, starting from higher precedence\n  const configTypes = [\n    ...(scaleType === 'band' ? ['axisBand'] : []),\n    ...(isQuantitative(scaleType) ? ['axisQuantitative'] : []),\n    ...(scaleType === 'time' || scaleType === 'utc' ? ['axisTemporal'] : []),\n\n    // X/Y\n    channel === 'x' ? 'axisX' : 'axisY',\n\n    // axisTop, axisBottom, ...\n    ...(orient ? ['axis' + orient.substr(0, 1).toUpperCase() + orient.substr(1)] : []),\n    'axis'\n  ];\n  for (const configType of configTypes) {\n    if (config[configType]?.[property] !== undefined) {\n      return {\n        configFrom: configType,\n        configValue: config[configType][property]\n      };\n    }\n  }\n\n  return {};\n}\n"]}