import { PositionChannel } from '../../../channel';
import { VgValueRef } from '../../../vega.schema';
import { ScaleComponent } from '../../scale/component';
import { UnitModel } from '../../unit';
/**
 * Return encode for point (non-band) position channels.
 */
export declare function pointPosition(channel: 'x' | 'y', model: UnitModel, { defaultPos, vgChannel }: {
    defaultPos: 'mid' | 'zeroOrMin' | 'zeroOrMax';
    vgChannel?: 'x' | 'y' | 'xc' | 'yc';
}): {
    [x: string]: VgValueRef | VgValueRef[];
};
export declare function pointPositionDefaultRef({ model, defaultPos, channel, scaleName, scale, checkBarAreaWithoutZero: checkBarAreaWithZero }: {
    model: UnitModel;
    defaultPos: 'mid' | 'zeroOrMin' | 'zeroOrMax';
    channel: PositionChannel;
    scaleName: string;
    scale: ScaleComponent;
    checkBarAreaWithoutZero: boolean;
}): () => import("vega-typings/types").SignalRef | {
    value: import("../../../channeldef").ValueOrGradientOrText;
} | {
    field: {
        group: string;
    };
} | {
    scale: string;
    value: number;
} | {
    mult: number;
    signal: string;
    scale?: undefined;
    value?: undefined;
};
//# sourceMappingURL=position-point.d.ts.map