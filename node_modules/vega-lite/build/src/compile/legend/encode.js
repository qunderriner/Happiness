import { array, isArray, stringValue } from 'vega-util';
import { COLOR, OPACITY } from '../../channel';
import { hasConditionalValueDef, isTimeFormatFieldDef, isValueDef } from '../../channeldef';
import { FILL_STROKE_CONFIG } from '../../mark';
import { ScaleType } from '../../scale';
import { normalizeTimeUnit } from '../../timeunit';
import { getFirstDefined, keys, varName } from '../../util';
import { applyMarkConfig, signalOrValueRef, timeFormatExpression } from '../common';
import * as mixins from '../mark/encode';
import { STORE } from '../selection';
import { defaultType } from './properties';
function type(legendCmp, model, channel) {
    const scaleType = model.getScaleComponent(channel).get('type');
    return getFirstDefined(legendCmp.get('type'), defaultType({ channel, scaleType, alwaysReturn: true }));
}
export function symbols(fieldDef, symbolsSpec, model, channel, legendCmp) {
    var _a, _b, _c, _d, _e;
    if (type(legendCmp, model, channel) !== 'symbol') {
        return undefined;
    }
    const { markDef, encoding, config, mark } = model;
    const filled = markDef.filled && mark !== 'trail';
    let out = Object.assign(Object.assign({}, applyMarkConfig({}, model, FILL_STROKE_CONFIG)), mixins.color(model, { filled })); // FIXME: remove this when VgEncodeEntry is compatible with SymbolEncodeEntry
    const opacity = (_a = getMaxValue(encoding.opacity), (_a !== null && _a !== void 0 ? _a : markDef.opacity));
    const condition = selectedCondition(model, legendCmp, fieldDef);
    if (out.fill) {
        // for fill legend, we don't want any fill in symbol
        if (channel === 'fill' || (filled && channel === COLOR)) {
            delete out.fill;
        }
        else {
            if (out.fill['field']) {
                // For others, set fill to some opaque value (or nothing if a color is already set)
                if (legendCmp.get('symbolFillColor')) {
                    delete out.fill;
                }
                else {
                    out.fill = signalOrValueRef((_b = config.legend.symbolBaseFillColor, (_b !== null && _b !== void 0 ? _b : 'black')));
                    out.fillOpacity = signalOrValueRef((opacity !== null && opacity !== void 0 ? opacity : 1));
                }
            }
            else if (isArray(out.fill)) {
                const fill = (_e = (_d = getFirstConditionValue((_c = encoding.fill, (_c !== null && _c !== void 0 ? _c : encoding.color))), (_d !== null && _d !== void 0 ? _d : markDef.fill)), (_e !== null && _e !== void 0 ? _e : (filled && markDef.color)));
                if (fill) {
                    out.fill = signalOrValueRef(fill);
                }
            }
        }
    }
    if (out.stroke) {
        if (channel === 'stroke' || (!filled && channel === COLOR)) {
            delete out.stroke;
        }
        else {
            if (out.stroke['field']) {
                // For others, remove stroke field
                delete out.stroke;
            }
            else if (isArray(out.stroke)) {
                const stroke = getFirstDefined(getFirstConditionValue(encoding.stroke || encoding.color), markDef.stroke, filled ? markDef.color : undefined);
                if (stroke) {
                    out.stroke = { value: stroke };
                }
            }
        }
    }
    if (channel !== OPACITY) {
        if (condition) {
            out.opacity = [
                Object.assign({ test: condition }, signalOrValueRef((opacity !== null && opacity !== void 0 ? opacity : 1))),
                signalOrValueRef(config.legend.unselectedOpacity)
            ];
        }
        else if (opacity) {
            out.opacity = signalOrValueRef(opacity);
        }
    }
    out = Object.assign(Object.assign({}, out), symbolsSpec);
    return keys(out).length > 0 ? out : undefined;
}
export function gradient(fieldDef, gradientSpec, model, channel, legendCmp) {
    if (type(legendCmp, model, channel) !== 'gradient') {
        return undefined;
    }
    let out = {};
    const opacity = getMaxValue(model.encoding.opacity) || model.markDef.opacity;
    if (opacity) {
        // only apply opacity if it is neither zero or undefined
        out.opacity = signalOrValueRef(opacity);
    }
    out = Object.assign(Object.assign({}, out), gradientSpec);
    return keys(out).length > 0 ? out : undefined;
}
export function labels(fieldDef, labelsSpec, model, channel, legendCmp) {
    var _a;
    const legend = model.legend(channel);
    const config = model.config;
    const condition = selectedCondition(model, legendCmp, fieldDef);
    let out = {};
    if (isTimeFormatFieldDef(fieldDef)) {
        const isUTCScale = model.getScaleComponent(channel).get('type') === ScaleType.UTC;
        const expr = timeFormatExpression('datum.value', (_a = normalizeTimeUnit(fieldDef.timeUnit)) === null || _a === void 0 ? void 0 : _a.unit, legend.format, config.timeFormat, isUTCScale);
        labelsSpec = Object.assign(Object.assign({}, (expr ? { text: { signal: expr } } : {})), labelsSpec);
    }
    if (condition) {
        labelsSpec.opacity = [{ test: condition, value: 1 }, { value: config.legend.unselectedOpacity }];
    }
    out = Object.assign(Object.assign({}, out), labelsSpec);
    return keys(out).length > 0 ? out : undefined;
}
export function entries(fieldDef, entriesSpec, model, channel, legendCmp) {
    var _a;
    const selections = legendCmp.get('selections');
    return ((_a = selections) === null || _a === void 0 ? void 0 : _a.length) ? { fill: { value: 'transparent' } } : undefined;
}
function getMaxValue(channelDef) {
    return getConditionValue(channelDef, (v, conditionalDef) => Math.max(v, conditionalDef.value));
}
export function getFirstConditionValue(channelDef) {
    return getConditionValue(channelDef, (v, conditionalDef) => {
        return getFirstDefined(v, conditionalDef.value);
    });
}
function getConditionValue(channelDef, reducer) {
    if (hasConditionalValueDef(channelDef)) {
        return array(channelDef.condition).reduce(reducer, channelDef.value);
    }
    else if (isValueDef(channelDef)) {
        return channelDef.value;
    }
    return undefined;
}
function selectedCondition(model, legendCmp, fieldDef) {
    var _a;
    const selections = legendCmp.get('selections');
    if (!((_a = selections) === null || _a === void 0 ? void 0 : _a.length))
        return undefined;
    const field = stringValue(fieldDef.field);
    return selections
        .map(name => {
        const store = stringValue(varName(name) + STORE);
        return `(!length(data(${store})) || (${name}[${field}] && indexof(${name}[${field}], datum.value) >= 0))`;
    })
        .join(' || ');
}
//# sourceMappingURL=encode.js.map