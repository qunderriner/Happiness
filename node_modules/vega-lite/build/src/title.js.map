{"version":3,"file":"title.js","sourceRoot":"","sources":["../../src/title.ts"],"names":[],"mappings":";AACA,OAAO,EAAC,OAAO,EAAE,QAAQ,EAAC,MAAM,WAAW,CAAC;AA0D5C,MAAM,UAAU,kBAAkB,CAChC,WAAwB;IAMxB,MAAM;IACJ,4DAA4D;IAC5D,MAAM,EACN,KAAK,EACL,MAAM,EACN,MAAM;IACN,qCAAqC;IACrC,KAAK;IAEL,sBAAsB;IACtB,aAAa,EACb,YAAY,EACZ,gBAAgB,EAChB,iBAAiB,EACjB,kBAAkB,EAClB,kBAAkB,EAClB,eAAe,KAIb,WAAW;IAFb,4BAA4B;IAC5B,gOACa,CAAC;IAEhB,MAAM,IAAI,mCACL,eAAe,GACf,CAAC,KAAK,CAAC,CAAC,CAAC,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAChC,CAAC;IAEF,MAAM,OAAO,+DACR,CAAC,MAAM,CAAC,CAAC,CAAC,EAAC,MAAM,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GACxB,CAAC,KAAK,CAAC,CAAC,CAAC,EAAC,KAAK,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GACtB,CAAC,MAAM,CAAC,CAAC,CAAC,EAAC,MAAM,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GACxB,CAAC,MAAM,CAAC,CAAC,CAAC,EAAC,MAAM,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAC5B,CAAC;IAEF,MAAM,QAAQ,yGACT,CAAC,aAAa,CAAC,CAAC,CAAC,EAAC,aAAa,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GACtC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAC,YAAY,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GACpC,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAC,gBAAgB,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAC5C,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAC,iBAAiB,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAC9C,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAC,kBAAkB,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAChD,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAC,kBAAkB,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAChD,CAAC,eAAe,CAAC,CAAC,CAAC,EAAC,eAAe,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAC9C,CAAC;IAEF,OAAO,EAAC,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAC,CAAC;AACnC,CAAC;AAED,MAAM,UAAU,MAAM,CAAC,CAAM;IAC3B,OAAO,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,CAAC","sourcesContent":["import {BaseTitle, Text, TextEncodeEntry, TitleAnchor} from 'vega-typings';\nimport {isArray, isString} from 'vega-util';\nimport {MarkConfig} from './mark';\nimport {ExcludeMappedValueRef, ExcludeMappedValueRefButKeepSignal} from './vega.schema';\n\nexport type BaseTitleNoValueRefs = ExcludeMappedValueRefButKeepSignal<Omit<BaseTitle, 'align' | 'baseline'>> &\n  // Since some logic depends on align/baseline, Vega-Lite does NOT allow signal for them.\n  ExcludeMappedValueRef<Pick<BaseTitle, 'align' | 'baseline'>>;\n\nexport type TitleConfig = BaseTitleNoValueRefs;\n\nexport interface TitleBase extends BaseTitleNoValueRefs {\n  /**\n   * The anchor position for placing the title. One of `\"start\"`, `\"middle\"`, or `\"end\"`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title.\n   *\n   * __Default value:__ `\"middle\"` for [single](https://vega.github.io/vega-lite/docs/spec.html) and [layered](https://vega.github.io/vega-lite/docs/layer.html) views.\n   * `\"start\"` for other composite views.\n   *\n   * __Note:__ [For now](https://github.com/vega/vega-lite/issues/2875), `anchor` is only customizable only for [single](https://vega.github.io/vega-lite/docs/spec.html) and [layered](https://vega.github.io/vega-lite/docs/layer.html) views. For other composite views, `anchor` is always `\"start\"`.\n   */\n  anchor?: TitleAnchor;\n\n  /**\n   * A [mark style property](https://vega.github.io/vega-lite/docs/config.html#style) to apply to the title text mark.\n   *\n   * __Default value:__ `\"group-title\"`.\n   */\n  style?: string | string[];\n\n  /**\n   * \tThe integer z-index indicating the layering of the title group relative to other axis, mark and legend groups.\n   *\n   * __Default value:__ `0`.\n   *\n   * @TJS-type integer\n   * @minimum 0\n   */\n  zindex?: number;\n\n  /**\n   * Mark definitions for custom encoding.\n   *\n   * @hidden\n   */\n  encoding?: TextEncodeEntry;\n}\n\nexport interface TitleParams extends TitleBase {\n  /**\n   * The title text.\n   */\n  text: Text;\n\n  /**\n   * The subtitle Text.\n   */\n  subtitle?: Text;\n}\n\nexport function extractTitleConfig(\n  titleConfig: TitleConfig\n): {\n  mark: MarkConfig;\n  nonMark: BaseTitleNoValueRefs;\n  subtitle: BaseTitleNoValueRefs;\n} {\n  const {\n    // These are non-mark title config that need to be hardcoded\n    anchor,\n    frame,\n    offset,\n    orient,\n    // color needs to be redirect to fill\n    color,\n\n    // subtitle properties\n    subtitleColor,\n    subtitleFont,\n    subtitleFontSize,\n    subtitleFontStyle,\n    subtitleFontWeight,\n    subtitleLineHeight,\n    subtitlePadding,\n\n    // The rest are mark config.\n    ...titleMarkConfig\n  } = titleConfig;\n\n  const mark: MarkConfig = {\n    ...titleMarkConfig,\n    ...(color ? {fill: color} : {})\n  };\n\n  const nonMark: BaseTitleNoValueRefs = {\n    ...(anchor ? {anchor} : {}),\n    ...(frame ? {frame} : {}),\n    ...(offset ? {offset} : {}),\n    ...(orient ? {orient} : {})\n  };\n\n  const subtitle: BaseTitleNoValueRefs = {\n    ...(subtitleColor ? {subtitleColor} : {}),\n    ...(subtitleFont ? {subtitleFont} : {}),\n    ...(subtitleFontSize ? {subtitleFontSize} : {}),\n    ...(subtitleFontStyle ? {subtitleFontStyle} : {}),\n    ...(subtitleFontWeight ? {subtitleFontWeight} : {}),\n    ...(subtitleLineHeight ? {subtitleLineHeight} : {}),\n    ...(subtitlePadding ? {subtitlePadding} : {})\n  };\n\n  return {mark, nonMark, subtitle};\n}\n\nexport function isText(v: any): v is Text {\n  return isString(v) || (isArray(v) && isString(v[0]));\n}\n"]}